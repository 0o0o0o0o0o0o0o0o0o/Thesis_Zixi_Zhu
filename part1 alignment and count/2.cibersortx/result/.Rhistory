library(dendextend)
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 5)
clusters2 <- cutree(hc, k = 6)
umap_df$cluster1 <- as.factor(clusters1)
umap_df$cluster2 <- as.factor(clusters2)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
ggplot(umap_df, aes(x = V1, y = V2, color = cluster2)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
setwd("D:\\Thesis\\model_fit")
save(clusters1,file = "c5.RData")
save(clusters2,file = "c6.RData")
pca_test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
umap <- umap(pca_test)
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
ggplot(umap_df, aes(x = V1, y = V2, color = category)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection", x = "UMAP 1", y = "UMAP 2")
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 4)
clusters2 <- cutree(hc, k = 5)
umap_df$cluster1 <- as.factor(clusters1)
umap_df$cluster2 <- as.factor(clusters2)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
ggplot(umap_df, aes(x = V1, y = V2, color = cluster2)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
save(clusters1,file = "all.RData")
rm(list=ls())
library(FactoMineR)
library(factoextra)
library(rvest)
library(tidyverse)
#change to your own pathways
setwd("D:\\Thesis\\sample\\dp-s88-phen")
#read and merge three clinical data set
library("readxl")
set1 <- read_excel("DepressionGenesNetworks_AllSCIDS_distribution.xlsx", sheet = "DATA", col_names = T)
set2 <- read_excel("DepressionGenesNetworks_case_control_phenotype_distribution.xlsx", sheet = "Data", col_names = T)
set3 <- read_excel("DepressionGenesNetworks_ScreenData_distribution.xlsx", sheet = "NIH_Depression_Hopkins_18NOV10", col_names = T)
colnames(set2)[3] <- "cell_id"
#remove replicate variables in  set1 and set2
set2_reduced <- set2[,!colnames(set2) %in% colnames(set1)[colnames(set1) != "cell_id"]]
data <- merge(set1,set2_reduced,by="cell_id")
#remove replicate variables in  set2 and set3
set3_reduced <- set3[,!colnames(set3) %in% colnames(data)[colnames(data) != "cell_id"]]
data <- merge(data,set3_reduced,by="cell_id")
data <- data[data$cell_id!="LD0053",]
control <- data[data$case_control_status==1,]
case <- data[data$case_control_status==2,]
#data clean for whole dataset
test <- case
#rownames(test) <- case$cell_id
#transform all variables into numeric ang delete variables do not contain values
test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
test <- test[, colSums(is.na(test)) != nrow(test)]
#Divide variables into variables containing only a single value, category vatiables and numeric variables by number of unique value
#For category variable, impute missing values by minimum values greater or equal to zero
#For numeric variable, impute missing values by the mean of variables
select <- c()
drop <- c()
for (i in 1:ncol(test))
{
num <- length(unique(test[,i]))
if (num==1)
{
drop <- c(drop,colnames(test)[i])
}
else if (num<10)               #category
{
select <- c(select,colnames(test)[i])
min <- min(test[,i],na.rm = T)
if (min<0)
{
imput <- 0
}
else
{
imput <- min
}
###colnames(test)[i]
test[[colnames(test)[i]]][is.na(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.nan(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.infinite(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]] <- as.factor(test[[colnames(test)[i]]])
}
else
{
imput <- mean(test[[colnames(test)[i]]],na.rm=T)
test[[colnames(test)[i]]][is.na(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.nan(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.infinite(test[[colnames(test)[i]]])] <- imput
}
}
#remove variables containing only a single value
test <- test[,!colnames(test) %in% drop]
#identify numeric variables
num <- colnames(test)[!colnames(test) %in% select]
#place category variables and numeric variables in order
order <- c(select,num)
test <- test[,order]
#After imputation, variables containing only a single value exist again
#remove variables containing only a single value
drop_new <- c()
for (i in 1:ncol(test))
{
num <- length(unique(test[,i]))
if (num==1)
{
drop_new <- c(drop_new,colnames(test)[i])
}
}
test <- test[,!colnames(test) %in% drop_new]
variable1 <- read.table("variable1.txt",header = F)
variable1 <- variable1$V1
concentrate <- test[,variable1]
#divide category variables and numeric variables
cate <- c()
for (i in 1:ncol(concentrate))
{
num <- length(unique(concentrate[,i]))
if (num<10)
{
cate <- c(cate,colnames(concentrate)[i])
}
}
num <- colnames(concentrate)[!colnames(concentrate) %in% cate]
order <- c(cate,num)
concentrate <- concentrate[,order]
##umap with all variables
pca_test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
umap <- umap(pca_test)
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
umap <- umap(pca_test)
library(dendextend)
library("umap")
umap <- umap(pca_test)
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
ggplot(umap_df, aes(x = V1, y = V2, color = category)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection", x = "UMAP 1", y = "UMAP 2")
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 4)
umap_df$cluster <- as.factor(clusters1)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
##umap with all variables
pca_test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
umap <- umap(pca_test)
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 4)
umap_df$cluster1 <- as.factor(clusters1)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
umap_con<- as.data.frame(lapply(concentrate, function(x) as.numeric(as.character(x))))
umap <- umap(umap_con)
setwd("D:\\Thesis\\model_fit")
load("result.RData")
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
ggplot(umap_df, aes(x = V1, y = V2, color = category)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection", x = "UMAP 1", y = "UMAP 2")
library(dendextend)
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 5)
clusters2 <- cutree(hc, k = 6)
umap_df$cluster1 <- as.factor(clusters1)
umap_df$cluster2 <- as.factor(clusters2)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
rm(list=ls())
library(FactoMineR)
library(factoextra)
library(rvest)
library(tidyverse)
#change to your own pathways
setwd("D:\\Thesis\\sample\\dp-s88-phen")
#read and merge three clinical data set
library("readxl")
set1 <- read_excel("DepressionGenesNetworks_AllSCIDS_distribution.xlsx", sheet = "DATA", col_names = T)
set2 <- read_excel("DepressionGenesNetworks_case_control_phenotype_distribution.xlsx", sheet = "Data", col_names = T)
set3 <- read_excel("DepressionGenesNetworks_ScreenData_distribution.xlsx", sheet = "NIH_Depression_Hopkins_18NOV10", col_names = T)
colnames(set2)[3] <- "cell_id"
#remove replicate variables in  set1 and set2
set2_reduced <- set2[,!colnames(set2) %in% colnames(set1)[colnames(set1) != "cell_id"]]
data <- merge(set1,set2_reduced,by="cell_id")
#remove replicate variables in  set2 and set3
set3_reduced <- set3[,!colnames(set3) %in% colnames(data)[colnames(data) != "cell_id"]]
data <- merge(data,set3_reduced,by="cell_id")
data <- data[data$cell_id!="LD0053",]
control <- data[data$case_control_status==1,]
case <- data[data$case_control_status==2,]
#data clean for whole dataset
test <- case
#rownames(test) <- case$cell_id
#transform all variables into numeric ang delete variables do not contain values
test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
test <- test[, colSums(is.na(test)) != nrow(test)]
#Divide variables into variables containing only a single value, category vatiables and numeric variables by number of unique value
#For category variable, impute missing values by minimum values greater or equal to zero
#For numeric variable, impute missing values by the mean of variables
select <- c()
drop <- c()
for (i in 1:ncol(test))
{
num <- length(unique(test[,i]))
if (num==1)
{
drop <- c(drop,colnames(test)[i])
}
else if (num<10)               #category
{
select <- c(select,colnames(test)[i])
min <- min(test[,i],na.rm = T)
if (min<0)
{
imput <- 0
}
else
{
imput <- min
}
###colnames(test)[i]
test[[colnames(test)[i]]][is.na(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.nan(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.infinite(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]] <- as.factor(test[[colnames(test)[i]]])
}
else
{
imput <- mean(test[[colnames(test)[i]]],na.rm=T)
test[[colnames(test)[i]]][is.na(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.nan(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.infinite(test[[colnames(test)[i]]])] <- imput
}
}
#remove variables containing only a single value
test <- test[,!colnames(test) %in% drop]
#identify numeric variables
num <- colnames(test)[!colnames(test) %in% select]
#place category variables and numeric variables in order
order <- c(select,num)
test <- test[,order]
drop_new <- c()
for (i in 1:ncol(test))
{
num <- length(unique(test[,i]))
if (num==1)
{
drop_new <- c(drop_new,colnames(test)[i])
}
}
test <- test[,!colnames(test) %in% drop_new]
variable1 <- read.table("variable1.txt",header = F)
variable1 <- variable1$V1
concentrate <- test[,variable1]
#divide category variables and numeric variables
cate <- c()
for (i in 1:ncol(concentrate))
{
num <- length(unique(concentrate[,i]))
if (num<10)
{
cate <- c(cate,colnames(concentrate)[i])
}
}
num <- colnames(concentrate)[!colnames(concentrate) %in% cate]
order <- c(cate,num)
concentrate <- concentrate[,order]
umap_con<- as.data.frame(lapply(concentrate, function(x) as.numeric(as.character(x))))
umap <- umap(umap_con)
setwd("D:\\Thesis\\model_fit")
load("result.RData")
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
ggplot(umap_df, aes(x = V1, y = V2, color = category)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection", x = "UMAP 1", y = "UMAP 2")
rm(list=ls())
library(FactoMineR)
library(factoextra)
library(rvest)
library(tidyverse)
#change to your own pathways
setwd("D:\\Thesis\\sample\\dp-s88-phen")
#read and merge three clinical data set
library("readxl")
set1 <- read_excel("DepressionGenesNetworks_AllSCIDS_distribution.xlsx", sheet = "DATA", col_names = T)
set2 <- read_excel("DepressionGenesNetworks_case_control_phenotype_distribution.xlsx", sheet = "Data", col_names = T)
set3 <- read_excel("DepressionGenesNetworks_ScreenData_distribution.xlsx", sheet = "NIH_Depression_Hopkins_18NOV10", col_names = T)
colnames(set2)[3] <- "cell_id"
#remove replicate variables in  set1 and set2
set2_reduced <- set2[,!colnames(set2) %in% colnames(set1)[colnames(set1) != "cell_id"]]
data <- merge(set1,set2_reduced,by="cell_id")
#remove replicate variables in  set2 and set3
set3_reduced <- set3[,!colnames(set3) %in% colnames(data)[colnames(data) != "cell_id"]]
data <- merge(data,set3_reduced,by="cell_id")
data <- data[data$cell_id!="LD0053",]
control <- data[data$case_control_status==1,]
case <- data[data$case_control_status==2,]
#data clean for whole dataset
test <- case
#rownames(test) <- case$cell_id
#transform all variables into numeric ang delete variables do not contain values
test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
test <- test[, colSums(is.na(test)) != nrow(test)]
#Divide variables into variables containing only a single value, category vatiables and numeric variables by number of unique value
#For category variable, impute missing values by minimum values greater or equal to zero
#For numeric variable, impute missing values by the mean of variables
select <- c()
drop <- c()
for (i in 1:ncol(test))
{
num <- length(unique(test[,i]))
if (num==1)
{
drop <- c(drop,colnames(test)[i])
}
else if (num<10)               #category
{
select <- c(select,colnames(test)[i])
min <- min(test[,i],na.rm = T)
if (min<0)
{
imput <- 0
}
else
{
imput <- min
}
###colnames(test)[i]
test[[colnames(test)[i]]][is.na(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.nan(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.infinite(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]] <- as.factor(test[[colnames(test)[i]]])
}
else
{
imput <- mean(test[[colnames(test)[i]]],na.rm=T)
test[[colnames(test)[i]]][is.na(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.nan(test[[colnames(test)[i]]])] <- imput
test[[colnames(test)[i]]][is.infinite(test[[colnames(test)[i]]])] <- imput
}
}
#remove variables containing only a single value
test <- test[,!colnames(test) %in% drop]
#identify numeric variables
num <- colnames(test)[!colnames(test) %in% select]
#place category variables and numeric variables in order
order <- c(select,num)
test <- test[,order]
#After imputation, variables containing only a single value exist again
#remove variables containing only a single value
drop_new <- c()
for (i in 1:ncol(test))
{
num <- length(unique(test[,i]))
if (num==1)
{
drop_new <- c(drop_new,colnames(test)[i])
}
}
test <- test[,!colnames(test) %in% drop_new]
variable1 <- read.table("variable1.txt",header = F)
variable1 <- variable1$V1
concentrate <- test[,variable1]
cate <- c()
for (i in 1:ncol(concentrate))
{
num <- length(unique(concentrate[,i]))
if (num<10)
{
cate <- c(cate,colnames(concentrate)[i])
}
}
num <- colnames(concentrate)[!colnames(concentrate) %in% cate]
order <- c(cate,num)
concentrate <- concentrate[,order]
##umap with high contributing variables
set.seed(123)
umap_con<- as.data.frame(lapply(concentrate, function(x) as.numeric(as.character(x))))
umap <- umap(umap_con)
setwd("D:\\Thesis\\model_fit")
load("result.RData")
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
ggplot(umap_df, aes(x = V1, y = V2, color = category)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection", x = "UMAP 1", y = "UMAP 2")
library(dendextend)
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 5)
clusters2 <- cutree(hc, k = 6)
umap_df$cluster1 <- as.factor(clusters1)
umap_df$cluster2 <- as.factor(clusters2)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
ggplot(umap_df, aes(x = V1, y = V2, color = cluster2)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
pca_test <- as.data.frame(lapply(test, function(x) as.numeric(as.character(x))))
umap <- umap(pca_test)
umap_df <- as.data.frame(umap$layout)
umap_df$category <- result$result
ggplot(umap_df, aes(x = V1, y = V2, color = category)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection", x = "UMAP 1", y = "UMAP 2")
hc <- hclust(dist(umap_df))
clusters1 <- cutree(hc, k = 4)
clusters2 <- cutree(hc, k = 5)
umap_df$cluster1 <- as.factor(clusters1)
umap_df$cluster2 <- as.factor(clusters2)
ggplot(umap_df, aes(x = V1, y = V2, color = cluster1)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
ggplot(umap_df, aes(x = V1, y = V2, color = cluster2)) +
geom_point() +
theme_minimal() +
labs(title = "UMAP Projection with Hierarchical Clustering", x = "UMAP 1", y = "UMAP 2")
rm(list=ls())
library(FactoMineR)
library(factoextra)
library(rvest)
library(tidyverse)
#change to your own pathways
setwd("D:\\Thesis\\sample\\dp-s88-phen")
#read and merge three clinical data set
library("readxl")
set1 <- read_excel("DepressionGenesNetworks_AllSCIDS_distribution.xlsx", sheet = "DATA", col_names = T)
set2 <- read_excel("DepressionGenesNetworks_case_control_phenotype_distribution.xlsx", sheet = "Data", col_names = T)
set3 <- read_excel("DepressionGenesNetworks_ScreenData_distribution.xlsx", sheet = "NIH_Depression_Hopkins_18NOV10", col_names = T)
colnames(set2)[3] <- "cell_id"
#remove replicate variables in  set1 and set2
set2_reduced <- set2[,!colnames(set2) %in% colnames(set1)[colnames(set1) != "cell_id"]]
data <- merge(set1,set2_reduced,by="cell_id")
#remove replicate variables in  set2 and set3
set3_reduced <- set3[,!colnames(set3) %in% colnames(data)[colnames(data) != "cell_id"]]
data <- merge(data,set3_reduced,by="cell_id")
data <- data[data$cell_id!="LD0053",]
control <- data[data$case_control_status==1,]
case <- data[data$case_control_status==2,]
##############################cluster classificaiton
setwd("D:\\Thesis\\model_fit")
load("all.RData")
result_con <- rep(0,459)
result_con <- as.data.frame(result_con)
rownames(result_con) <- control$cell_id
clusters1 <- as.data.frame(clusters1)
rownames(clusters1) <- case$cell_id
colnames(clusters1)[1] <- "result"
colnames(result_con)[1] <- "result"
cluster <- rbind(clusters1,result_con)
#######################cell type component
setwd("D:\\Thesis\\data\\result_tpm")
cell_com <- read.table("CIBERSORTx_Adjusted.txt",header=T)
array <- cell_com[,2:21]
rownames(array) <- cell_com$Mixture
colSums(array)>1
array_filter <- array[,colSums(array)>1]
#merge into a dateaset
array_filter$cell_id <- rownames(array_filter)
data <- merge(data,array_filter,by="cell_id")
cluster$cell_id <- rownames(cluster)
data <- merge(data,cluster,by="cell_id")
library(table1)
data$PPAGE_at_interview <- as.numeric(data$PPAGE_at_interview)
data$Bmi_Current <- as.numeric(data$Bmi_Current)
data$PHQ_TOT <- as.numeric(data$PHQ_TOT)
data$GAD_TOT <- as.numeric(data$GAD_TOT)
label(data$PPAGE_at_interview) <- "age"
label(data$Bmi_Current) <- "BMI"
label(data$PHQ_TOT) <- "PHQ Score"
label(data$GAD_TOT) <- "GAD Score"
data$gender <- factor(data$gender,levels = c("F","M"),labels=c("Female","Male"))
data$result <- factor(data$result,levels = c(0,1,2,3,4),labels=c("control group","group1","group2","group3","group4"))
data$Agegroup <- factor(data$Agegroup,levels = c(30,40,50,60),labels=c("20-29","30-39","40-49","50-60"))
table1(~gender+PPAGE_at_interview+Agegroup+Bmi_Current+PHQ_TOT+GAD_TOT|result,data = data)
